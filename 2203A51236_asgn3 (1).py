# -*- coding: utf-8 -*-
"""asn3_13/02

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ly613UwJ0MLb_Q9KUOKiIns3FAIp8OFv

# 1.	**Loading the US Housing data into a dataframe using pandas**
"""

import pandas as pd
import matplotlib as mat
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv("/Housing_20.csv")
df.head()

"""# **2.   The data types of each feature in the Datasets**"""

print("The data type of each feature:",df.dtypes)

"""## **3.	Generating a summary of the dataset for min, max, stddev, quartile vales for 25%,50%,75%,90%**"""

print("The summary of datasets:",df.describe(percentiles=[0.25, 0.5, 0.75, 0.9]))

"""# **4.	Listing the names of columns/features in the dataset**"""

print("The list of Names of features in the dataset:",df.columns.tolist())

"""# **5.	Generating a pairplot of the features of the dataset.**"""

print("The pairplot of the dataframe is:",sns.pairplot(df))

"""# **6.	Generate a correlation matrix and heatmap for the features**"""

print("The correlation matrix and heatmap of the features is:")
correlation_matrix = df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm")
plt.title("Correlation Matrix Heatmap")
plt.show()

"""# **Part 2 Model training and Fit the data to Model**

# 1. Split the data generated from list created as X, Y is distributed using train test split
# function as X trainY trainX testY test
"""

from sklearn import linear_model
from sklearn.model_selection import train_test_split
data = pd.read_csv("/Housing_20.csv")
data['ocean_proximity']=data['ocean_proximity']=='NEAR BAY'
mean_total_bedrooms=data['total_bedrooms'].mean()
data['total_bedrooms']=data['total_bedrooms'].fillna(mean_total_bedrooms)
data.isnull().sum()

data=data[:12000].copy()
regression= linear_model.LinearRegression()
x_train, x_check, y_train, y_check = train_test_split(data.iloc[:, 1:9].values, data.iloc[:, 9:10].values, test_size=0.30)
regression.fit(x_train, y_train)

regression.coef_

regression.score(x_check, y_check)

"""#Apply the linear regression model of sklearn package"""

from sklearn.linear_model import LinearRegression

# Create an instance of the LinearRegression class
model = LinearRegression()

# Fit the model to the data
model.fit(x_train, y_train)
print("Intercept:", model.intercept_)
print("Coefficients:", model.coef_)
print("R-squared:", model.score(x_train, y_train))



"""#Check the intercepts and slope for the data and compute the cumulative distribution

"""

import numpy as np
import scipy.stats as stats

intercept = model.intercept_
coefficients = model.coef_

print("Intercept:", intercept)
print("Coefficients:", coefficients)

predicted_values = model.predict(X)

mean_predicted = np.mean(predicted_values)
std_dev_predicted = np.std(predicted_values)

cdf_values = stats.norm.cdf(predicted_values, mean_predicted, std_dev_predicted)

print("CDF values:", cdf_values)

"""#**Part 3- Model Evaluation Metrics**

#Calculate the standard error and t-statistic for the coe cients.
"""

# Extract dependent and independent variables
X = data[['total_rooms']]
Y = data['population']

model = LinearRegression()
model.fit(X, Y)

n = len(Y)

p = len(model.coef_)

residuals = Y - model.predict(X)

RSE = np.sqrt(np.sum(residuals**2) / (n - p - 1))

X_matrix = np.column_stack([np.ones_like(X), X])
X_transpose_X_inv = np.linalg.inv(np.dot(X_matrix.T, X_matrix))
se_coefficients = np.sqrt(np.diag(X_transpose_X_inv) * RSE**2)

t_statistics = model.coef_ / se_coefficients[1:]

print("Standard Errors of Coefficients:", se_coefficients[1:])
print("T-Statistics of Coefficients:", t_statistics)

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

# Load the data from the CSV file into a Pandas DataFrame
data = pd.read_csv('/Housing_20.csv')

# Extract dependent variable (price) and independent variables
X = data.drop(columns=['total_bedrooms'])  # Independent variables (excluding 'Price')
Y = data['total_bedrooms']  # Dependent variable

# Fit the linear regression model
model = LinearRegression()
model.fit(X, Y)

# Compute the cumulative distribution function (CDF) of the coefficients
cdf_values = np.cumsum(np.abs(model.coef_)) / np.sum(np.abs(model.coef_))

# Sort the coefficients based on the CDF
sorted_coefficients = [x for _, x in sorted(zip(cdf_values, model.coef_), key=lambda pair: pair[0])]

# Generate scatter plots for other features with price as the dependent variable
for column in X.columns:
    plt.figure(figsize=(8, 6))
    plt.scatter(X[column], Y, color='blue')
    plt.title(f'Scatter Plot of {column} vs. Price')
    plt.xlabel(column)
    plt.ylabel('Price')
    plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Step 1: Read CSV file
data = pd.read_csv('/content/Housing_20.csv')

# Step 2: Sort coefficients based on CDF
coefficients = data['population']  # Assuming you have a column named 'coefficients'
sorted_coefficients = np.sort(coefficients)
cdf = np.cumsum(sorted_coefficients) / np.sum(sorted_coefficients)

# Step 3: Generate scatter plots
features = ['total_rooms', 'total_bedrooms', 'median_house_value']  # Replace with your feature names
for feature in features:
    plt.figure(figsize=(8, 6))
    plt.scatter(data[feature], data['median_house_value'], alpha=0.5)
    plt.xlabel(feature)
    plt.ylabel('median_house_value')
    plt.title(f'Scatter plot of {feature} vs. Price')
    plt.grid(True)
    plt.show()